name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Increase timeout to 2 hours if needed

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache Poetry and pip dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Install Poetry and dependencies
      - name: Install Poetry and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          # Install PyYAML without PEP 517
          pip install --no-build-isolation --no-binary :all: pyyaml==6.0
          poetry install --no-root --only main

      # Run pre-commit checks
      - name: Run Pre-Commit checks
        run: |
          pip install pre-commit
          pre-commit run --all-files

      # Lint with flake8
      - name: Lint with flake8
        run: |
          flake8 src/ scripts/ tests/

      # Format code with black
      - name: Format code with black
        run: |
          black --check src/ scripts/ tests/

      # Run Bandit for security analysis
      - name: Run Bandit security scan
        run: |
          bandit -r src/ scripts/ tests/

      # Run unit tests
      - name: Run unit tests
        run: |
          pytest tests/unit/

      - name: Run integration tests
        run: |
          python -m unittest tests/test_integration.py

      - name: Run end-to-end tests
        run: |
          python -m unittest tests/test_e2e.py

      # Cache DVC remote data
      - name: Configure DVC remote and pull data
        run: |
          dvc remote add -d myremote ${{ secrets.DVC_REMOTE_URL }}
          dvc pull

      # Upload coverage reports
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
